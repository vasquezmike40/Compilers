// Mike Vasquez
// N00885181

import java.io.*;
import java.util.*;
import java.text.*;
import java.lang.*;



public class LexAnalyzer
{      

      // current index of the location in the array
	static int currentIndex = 0;
      
	  // a boolean variable that determines that something is a number instead of a id
	static boolean isNum = false;
   
	  // a variable to determine the scope of the identifier
	static int depth = 0;
      
	  // a variable to track the current parse index in the tokens array
	static int parseindex = 0;

    /**
     * reads file
     * if not found gives a FileNotFoundException
    **/
	
	public static void main(String[] args) throws FileNotFoundException
		{
       
			// Read file from command line
		File file = new File(args[0]);
   
		/*
		The following array lists contain the relational 
		operators, keywords, deliminators, and expected mistakes
		*/
   	
   	
			// Relational Operators
		ArrayList<String> relational = new ArrayList<>();
		relational.add("+");
		relational.add("-");
		relational.add("*");
		relational.add("/");
		relational.add("<");
		relational.add("<=");
		relational.add(">");
		relational.add(">=");
		relational.add("==");
		relational.add("!=");
		relational.add("=");
   
			// Keywords
		ArrayList<String> keywords = new ArrayList<>();
		keywords.add("float");
		keywords.add("int");
		keywords.add("else");
		keywords.add("if");
		keywords.add("return");
		keywords.add("void");
		keywords.add("while");
   	
			// Deliminators
		ArrayList<String> delims = new ArrayList<>();
		delims.add(";");
		delims.add(",");
		delims.add("(");
		delims.add(")");
		delims.add("[");
		delims.add("]");
		delims.add("{");
		delims.add("}");
		delims.add(".");
   
			// Known Mistakes
		ArrayList<String> mistakes = new ArrayList<>();
		mistakes.add("!");
		mistakes.add("@");
		mistakes.add("_");
   
			// ArrayList for Generated Identifiers
		ArrayList<ident> lockerspace = new ArrayList<>();
		ArrayList<Token> tokens = new ArrayList<>();
   
			// Calls the lexical analyzer
		lexical(keywords, relational, delims, mistakes, lockerspace, file, tokens);
   
			// Calling the parser
		parse(tokens);
	  
			// The number of labels
		int n = lockerspace.size();
		
			// The first prime number greater than 2n
        int p = 0;
		
        for(int i = (2*n + 1); true; i++)
			{
				if(isPrime(i))
					{
						p = i;
						break;
					}
			}
   
   
			// Construct an array with all the symbols
        String [] symbolTable = new String [p];
        
		for(int i = 0; i < symbolTable.length; i++)
			{
				symbolTable[i] = null;
			}
		
		for (int i = 0; i <= lockerspace.size()-1; i++)
			{
				String temp1 = lockerspace.get(i).getLabel();
				int num = insert(symbolTable, templ, p);
            
				// Sets the hashVal
				lockerspace.get(i).setHashLocation(num);
			}
   
   
   
		}   // end main

     /*******************************************************
     * Between p1 and p2 nothing has changed here. This     *
	 * Method checks is the String passed to it is a number *
     *******************************************************/
    
	public static boolean isInteger(String stringNumber)
		{
			try
				{
					Integer.parseInt(stringNumber);
					return true;
				}
			catch(NumberFormatException e)
				{
				   return false;
				}
		}
	
	// Hashes
    public static int hash(String key, int arraySize)
		{
			int hashVal = 0;
			int alpha = 0;

			for(int j = 0; j < key.length(); j++)
				{
					if(key.charAt(j) > 64 && key.charAt(j) < 91)
						{
							alpha = key.charAt(j) - 64;
						}
					else if (key.charAt(j) > 96 && key.charAt(j) < 123)
						{
							alpha = key.charAt(j) - 96;
						}
					hashVal = (hashVal * 26 + alpha) % arraySize;
				}
			return hashVal;
		}

    // Inputs into
    static public int insert(String symbolTable[], String label, int arraySize)
		{
			int hashVal = hash(label, arraySize);

			while(symbolTable[hashVal] != null)
				{
					if(symbolTable[hashVal] == label)
						{
						}
					++hashVal;
					hashVal %= arraySize;
				}
			symbolTable[hashVal] = label;
			return hashVal;
		}
	  
     /**********************************************************************************
     * Reads in possible numbers and checks to see if they are valid                   *
     **********************************************************************************/
   
	public static void checkNum(String num, ArrayList<String> mistakes)
		{
			char [] array = num.toCharArray();
			String numToPrint = "";
			String errorNum = "";
			String error = "";
         
			for(int r = 0; r < array.length; r++)
				{
					if((array[0] == '.')||(array[0] == 'E'))
						{
							errorNum = num;
							break;
						}
               
					if(isInteger(String.valueOf(array[r])))
						{	
							numToPrint = numToPrint + array[r];
                     
							if(r+1 < array.length)
								{
									if(array[r+1] == '.')
										{
											numToPrint = numToPrint + array[r+1];
											r = r + 1;
                                 
											if(r+1 < array.length)
												{
													if(isInteger(String.valueOf(array[r+1])))
														{
															numToPrint = numToPrint + array[r+1];
															r = r + 1;
														}
                                       
													else
														{
														errorNum = num;
														break;
														}
												}
										}
                           
									else if(array[r+1] == 'E')
										{
											numToPrint = numToPrint + array[r+1];
											r = r + 1;
                                 
											if(r+1 < array.length)
												{
													if((array[r+1] == '+') || (array[r+1] == '-'))
														{
															numToPrint = numToPrint + array[r+1];
															r = r + 1;
														}
                                                  
													else if(isInteger(String.valueOf(array[r+1])))
														{
															numToPrint = numToPrint + array[r+1];
															r = r + 1;
														}
                                       
													else
														{
															errorNum = num;
															break;
														}
												}
                                    
											else
												{
													errorNum = num;
													break;
												}
										}
                                          
									else if(isInteger(String.valueOf(array[r+1])))
										{
											numToPrint = numToPrint + array[r+1];
											r = r + 1;
										}
								}
						}
               
					else if(array[r] == '.')
						{
							numToPrint = numToPrint + array[r];
                     
							if(r+1 < array.length)
								{
									if(isInteger(String.valueOf(array[r+1])))
										{
											numToPrint = numToPrint + array[r+1];
											r = r + 1;
										}
                           
									else
										{
											errorNum = num;
											break;
										}
								}
                     
							else
								{
								   errorNum = num;
								   break;
								}
						}
                     
					else if(array[r] == 'E')
						{
							numToPrint = numToPrint + array[r];
                     
							if(r+1 < array.length)
								{
									if((array[r+1] == '+') || (array[r+1] == '-'))
										{
										numToPrint = numToPrint + array[r+1];
										r = r + 1;
										}
                           
									else if(isInteger(String.valueOf(array[r+1])))
										{
											 numToPrint = numToPrint + array[r+1];
											 r = r + 1;
										}
								}
                        
							else
								{
									errorNum = num;
									break;
								}
						}
                        
					if(mistakes.contains(String.valueOf(array[r])))
						{
							for(int f = r; f < array.length; f++)
								{
									error = error + array[f];
								}
							//System.out.println("error: " + error);
							System.out.println("REJECT");
							System.exit(1);
							break;
						}
				}
            
			if(errorNum.equals("") == true)
				{
					if((num.indexOf('.')) >= 0 || (num.indexOf('E')) >= 0)
						{
							//System.out.println("FLOAT: " + numToPrint);
							Token collected = new Token ("number", numToPrint);
							tokens.add(collected);
							numToPrint = "";
						}  
               
					else
						{
							//System.out.println("NUM: " + numToPrint);
							Token collected = new Token("number", numToPrint);
							tokens.add(collected);
							numToPrint = "";
						}
				}
            
			else
				{
					//System.out.println("ERROR: " + errorNum);
					System.out.println("REJECT");
					System.exit(1);
				}
		}

     /**********************************************************************************************************
     * Generates tokens based on the input file and also prints out its result to the console		            *
     * keywords : the ArrayList keywords to check if the string contains a keyword							         *
     * relational : the ArrayList relational to check if the string contains a relational operator			      *
     * delims : the ArrayList delims to check if the string contains an delimitor							         *
     * mistakes : the ArrayList mistakes to check if the string contains an error								            *
     * symbolTable : the ArrayList symbolTable that stores the identifiers, this isn't fully implemented yet	*
     * file : the file that is read in from the command line													            *
     **********************************************************************************************************/
    
	public static void lexical(ArrayList<String> keywords, ArrayList<String> relational, ArrayList<String> delims,
                               ArrayList<String> mistakes, ArrayList<String> symbolTable, File file, ArrayList<ident> lockerspaceile, ArrayList<Token> tokens)
		{
			try
				{
					Scanner input = new Scanner(file);
					int tracker = 0;
               
					while(input.hasNextLine())
						{
							String text = input.nextLine();
							String compare = "";
							//System.out.println("");
                     
							if(text.isEmpty() == false)
								{
									//System.out.println("INPUT: " + text);
								}
                     
							char [] newArray = text.toCharArray();
          // Checks for comments
							for(LexAnalyzer.currentIndex = 0; LexAnalyzer.currentIndex < newArray.length; LexAnalyzer.currentIndex++)
								{
									if ((LexAnalyzer.currentIndex + 1)< newArray.length)
										{
											if (String.valueOf(newArray, LexAnalyzer.currentIndex, 2).equals("/*"))
												{
													tracker++;
													LexAnalyzer.currentIndex++;
												}
                                 
											else if (String.valueOf(newArray, LexAnalyzer.currentIndex, 2).equals("*/"))
												{
													if(tracker > 0)
														{
															tracker--;
														}
                                       
													else if(tracker == 0)
														{
															compare = compare + newArray[LexAnalyzer.currentIndex];
														}
                                       
													LexAnalyzer.currentIndex++;
												}
                                 
											else if (String.valueOf(newArray, LexAnalyzer.currentIndex, 2).equals("//"))
												{
												break;
												}
										}
                              
                     // If no commments
									if(tracker == 0)
										{
											if(!String.valueOf(newArray[LexAnalyzer.currentIndex]).equals("\t")) 
												{
													compare = compare + newArray[LexAnalyzer.currentIndex];
												}
                                          
                     // If keyword then
											if(keywords.contains(compare))
												{
													//System.out.println("KEYWORD: " + compare);
													Token collected = new Token("keywords", compare);
													tokens.add(collected);
													compare = "";
													
												}
                        
                     // If there a relational operator that matches the string
											else if(relational.contains(compare))
												{
													if((LexAnalyzer.currentIndex+1) < newArray.length)
														{
															if(relational.contains(String.valueOf(newArray, LexAnalyzer.currentIndex, 2)))
																{
																	compare = compare + newArray[LexAnalyzer.currentIndex+1];
																	//System.out.println("RELATIONAL: " + compare);
																	Token collected = new Token("relational", compare);
																	tokens.add(collected);
																	compare = "";
																	compare = "";
																}
                                             
															else
																{
																	if(!(relational.contains(String.valueOf(newArray[LexAnalyzer.currentIndex-1]))))
																		{
																			//System.out.println("RELATIONAL: " + compare);
																			Token collected = new Token("relational", compare);
																			tokens.add(collected);
																			compare = "";
																		}
																}
                                             
															compare = "";
														}
												}
                     
                     // if there is an error in the string
											else if(mistakes.contains(compare))
												{
													boolean exception = false;
													String BigNoNo = "";
													
													if(compare.equals("!"))
														{
															if(LexAnalyzer.currentIndex + 1 < newArray.length)
																{
																	if((String.valueOf(newArray[LexAnalyzer.currentIndex + 1])).equals("="))
																		{
																			LexAnalyzer.currentIndex ++;
																			compare = compare + String.valueOf(newArray[LexAnalyzer.currentIndex]);
																			Token collected = new Token("relational", compare);
																			tokens.add(collected);
																			compare = "";
																			LexAnalyzer.currentIndex ++;
																			exception = true;
																		}
																}
															else
																{
																	BigNoNo = "!";
																	exception = false;
																	LexAnalyzer.currentIndex ++;
																}
														}
													else
														{
															for(int d = LexAnalyzer.currentIndex; d < newArray.length; d++)
																{
																	if(!(String.valueOf(newArray[d])).equals(" "))
																		{
																		   BigNoNo = BigNoNo + newArray[d];
																		}
													 
																	else
																		{
																		   LexAnalyzer.currentIndex = d;
																		   break;
																		}
																}
																
														}
													if 
														{
															exception == false
															//System.out.println("ERROR: " + BigNoNo);
															System.out.println("REJECT");
															System.exit(1);
															BigNoNo= "";
															compare = "";
														}
                     
                     // if read integer
											else if((isInteger(compare) == true) || (compare.equals(".")) || (compare.equals("E")))
												{
													String newNum = "";
													LexAnalyzer.isNum = true;
                                       
													for(int x = LexAnalyzer.currentIndex; x < newArray.length; x++)
														{
															if((newArray[x] != ' ') && (!(delims.contains(String.valueOf(newArray[x])))))
																{
																	newNum = newNum + newArray[x];
																}
                                             
															else
																{
																	LexAnalyzer.currentIndex = x;
																	checkNum(newNum, mistakes);
																	compare = "";
																	LexAnalyzer.isNum = false;
																	break;
																}
                                                   
															if(x == (newArray.length - 1))
																{
																   checkNum(newNum, mistakes);
																}
																		  
															LexAnalyzer.currentIndex = x;
														}
												}
                     
                     // if the string is a delimitor
											else if(delims.contains(compare))
												{
													//System.out.println("DELIMS: " + compare);
												    Token collected = new Token("delims", compare);
													tokens.add(collected);
													compare = "";
												}
                        
                     // at this point most likely an identifier
											else if((String.valueOf(newArray[LexAnalyzer.currentIndex]).equals(" ")) || (delims.contains(String.valueOf(newArray[LexAnalyzer.currentIndex]))) ||
													(relational.contains(String.valueOf(newArray[LexAnalyzer.currentIndex]))))
												{
													String newID = "";
													String testString = "";
													String beforeTest = "";
													Token data = new Token("", "");
													Token data1 = new Token("", "");
													Token data2 = new Token("", "");
                                                    boolean tester = false;   
													boolean tester1 = false;
													boolean tester2	= false;
													
													if((!(keywords.contains(compare)))&&(!(relational.contains(compare)))&&(!(delims.contains(compare)))
															&&(!(mistakes.contains(compare)))&&(!(compare).equals(" "))&&(isNum == false))
														{
															for(int k = 0; k < compare.length(); k++) 
																{
																   char f = compare.charAt(k);
																   beforeTest = testString;
																   testString = testString + f;
                                                                     
																	if(delims.contains(String.valueOf(f)))
																		{
																			data = new Token("delims", String.valueOf(f));
																			compare = "";
																			newID = beforeTest;
																		}
                                                                     
                                                   
																	else if(mistakes.contains(String.valueOf(f)))
																		{
																			String BigNoNo = compare.substring(k, compare.length());
																			//System.out.println("ERROR: " + BigNoNo);
																			System.out.println("REJECT");
																			System.exit(1);
																			compare = "";
																			break;
																		}
                                                                        
																	else if(relational.contains(String.valueOf(f)))
																		{
																			data = new Token("delims", String.valueOf(f));
																			tester = true;
																		}
																	else 
																		{
																			newID = newID + f;
																		}
																		
																}		
															
															if(newID.isEmpty() == false)
																{
																	if(keywords.contains(newID))
																		{
																			data5 = new Token("KEYWORD", newID);
																			check3 = true;
																		}
																	else
																		{
																		  Identifier data3 = new Identifier(newID, Project2.depthCount, 0);
																		  labelStorage.add(data3);
																		  Token data4 = new Token("ID", newID);
																		  tokens.add(data4);
																		}
																}	
																	if(tester2 == true)
																		{
																			tokens.add(data2);
																		}
																	if(tester == true)	
																		{
																			tokens.add(data);
																		}
																	if(tester1 == true)	
																		{
																			tokens.add(data1);
																		}
														} //good
													compare = "";						
												} //good
                                                                           
												                     
                     // if the string only contains 1 char
											else if(LexAnalyzer.currentIndex == (newArray.length - 1))
												{
													String newID = "";
													Token data = new Token("", "");
													Token data1 = new Token("", "");
													Token data2 = new Token("", "");
													boolean tester = false;
													boolean tester1 = false;
													boolean tester2 = false;
												  
													for(int p = 0; p < compare.length(); p++)
														{
															char f = compare.charAt(p);
															if(delims.contains(String.valueOf(f)))
																{
																	data = new Token("delims", String.valueOf(f));
																	check = true;
																}
															else if(errors.contains(String.valueOf(f)))
																{
																	String BigNoNo = "";
																	for(int j = p+1; j < newArray.length; j++)
																		{
																			if(!(String.valueOf(newArray[j])).equals(" "))
																				{
																					BigNoNo = BigNoNo + newArray[j];
																				}
																			else
																				{
																					LexAnalyzer.currentIndex = j;
																				break;
																				}
																		}
																	//System.out.println("ERROR: " + BigNoNo);
																	System.out.println("REJECT");
																	System.exit(1);
																	compare = "";
																	break;
																}
															else if(relational.contains(String.valueOf(f)))	
																{
																	data1 = new Token("RELATIONAL", String.valueOf(f));
																	tester1 = true;
																}
															else
																{
																	newID = newID + f;
																}
														}
												  if(newID.isEmpty() == false)
													{
														if(keywords.contains(newID))	
															{
																data3 = new Token("KEYWORD", newID);
																tester2 = true;
															}
														else
															{
																Identifier data3 = new Identifier(newID, LexAnalyzer.depthCount, 0);
																lockerspace.add(data3);
																Token data4 = new Token("ID", newID);
																tokens.add(data4);
															}
													}
												  if(tester2 == true)
													  {
														tokens.add(data2);
													  }
												  if(tester == true)
													  {
														tokens.add(data);
													  }
												  if(tester1 == true)
													{
														tokens.add(data1);
													}
													
												} //good
											}
										}
								}	 
					 
						}
					 
				}
			input.close();
			catch (FileNotFoundException e)
				{
					e.printStackTrace();
				}		 
		}			 


		



}		
					